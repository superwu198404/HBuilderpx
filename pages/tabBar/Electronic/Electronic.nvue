<template>
    <view class="uni-container">
        <template v-if="showSetTabBarPage">
            <set-tab-bar @unmount="leaveSetTabBarPage"></set-tab-bar>
        </template>
        <template v-else>
            <view v-if="!hasLeftWin" class="uni-header-logo">
                <image class="uni-header-image" src="/static/apiIndex.png"></image>
            </view>
            <view v-if="!hasLeftWin" class="uni-hello-text">
                <text class="hello-text">websocket：</text>
            </view>
            <view class="uni-panel" v-for="(item, index) in list" :key="item.id">
                <view class="uni-panel-h" :class="item.open ? 'uni-panel-h-on' : ''" @click="triggerCollapse(index, item.id)">
                    <text class="uni-panel-text">{{item.name}}</text>
                    <text class="uni-panel-icon uni-icon" :class="item.open ? 'uni-panel-icon-on' : ''">{{item.pages ? '&#xe581;' : '&#xe470;'}}</text>
                </view>
                <view class="uni-panel-c" v-if="item.open">
                    <view :class="{'left-win-active': leftWinActive === item2.url && hasLeftWin, 'pc-hide': item2.name === '设置TabBar' && hasLeftWin}" class="uni-navigate-item" v-for="(item2,key) in item.pages" :key="key" :url="item.url" @click="goDetailPage(item.id, item2.url)">
                        <text class="uni-navigate-text">{{item2.name ? item2.name : item2}}</text>
                        <text class="uni-navigate-icon uni-icon">&#xe470;</text>
                    </view>
                </view>
            </view>
        </template>
    </view>
</template>
<script>
    import setTabBar from '@/components/api-set-tabbar.nvue';
    export default {
        components: {
            setTabBar
        },
		props: {
			hasLeftWin: {
				type: Boolean
			},
			leftWinActive: {
				type: String
			}
		},
        data() {           
            const list = [{
                    id: 'websocket',
                    name: 'websocket',
                    open: false,
                    pages: [
                        // #ifndef MP-ALIPAY
                        {
                            name: 'socketTask',
                            url: 'websocket-socketTask'
                        },
                        // #endif
                        {
                            name: '全局websocket',
                            url: 'websocket-global'
                        }
                    ]
                },
            ];
            return {
                showSetTabBarPage: false,
                list: list,
				notForPc: [{
						name: '设置TabBar',
						url: 'set-tabbar'
				}]
            };
        },
        onShareAppMessage() {
            return {
                title: '欢迎体验分货电子屏系统',
                path: '/pages/tabBar/API/API'
            };
        },
        onNavigationBarButtonTap(e) {
            uni.navigateTo({
                url: '/pages/tabBar/API/API'
            });
        },
        onLoad() {
        },
        onReady() {
        },
        onShow() {
            this.navigateFlag = false;
            this.leaveSetTabBarPage();
        },
        onHide() {
            this.leaveSetTabBarPage();
        },

		// #ifdef H5
		watch:{
			$route: {
				immediate: true,
				handler(newRoute) {
					if (newRoute.matched.length) {
						let path = newRoute.path.split('/')[3]
						for (const item of this.list) {
							if (Array.isArray(item.pages)) {
								for (const page of item.pages) {
									if (page === path || page.url && page.url === path) {
										item.open = true
									}
								}
							}
						}
					}
				}
			}
		},
		// #endif
        methods: {
            triggerCollapse(e, id) {
                if (!this.list[e].pages) {
                    this.goDetailPage('', this.list[e].url);
                    return;
                }
				for (var i = 0; i < this.list.length; ++i) {
					if (e === i) {
						this.list[i].open = !this.list[i].open;
					} else {
						this.list[i].open = false;
					}
				}
            },
            goDetailPage(panel, e) {
				if (e === 'set-tabbar') {
					this.showSetTabBarPage = true;
					return;
				}
				let url = ~e.indexOf('platform') ? e : '/pages/API/' + e + '/' + e;
				if (this.hasLeftWin) {
					uni.reLaunch({
						url: url
					})
				} else {
					uni.navigateTo({
						url: url
					})
				}
            },
            leaveSetTabBarPage() {
                this.showSetTabBarPage = false;
            }
        }
    };
</script>

<style>
    @import '../../../common/uni-nvue.css';
</style>
